{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Elm for the win! Elm is purely functional programming language. hallo Some examples The first line is a so called type annotation, it describes the input and output type of functions. In this first case there is only 1 annotation, String, this is the output. helloWorld: String helloWorld = \"Hello world!\" A little more complicated example example : addNumbers: Int -> Int -> Int addNumbers number1 number2 = number1 + number2 As you can see AddNumbers needs 2 inputs, number1 and number2, both of these are an Int. And the output is an Int aswell. -addNumbers: Int (number1) -> -Int (number2) -> -Int (output, in this case: number1 + number2) Everything in elm returns something, the last line is always the return type. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#elm-for-the-win","text":"Elm is purely functional programming language. hallo","title":"Elm for the win!"},{"location":"#some-examples","text":"The first line is a so called type annotation, it describes the input and output type of functions. In this first case there is only 1 annotation, String, this is the output. helloWorld: String helloWorld = \"Hello world!\" A little more complicated example example : addNumbers: Int -> Int -> Int addNumbers number1 number2 = number1 + number2 As you can see AddNumbers needs 2 inputs, number1 and number2, both of these are an Int. And the output is an Int aswell. -addNumbers: Int (number1) -> -Int (number2) -> -Int (output, in this case: number1 + number2) Everything in elm returns something, the last line is always the return type.","title":"Some examples"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"about/","text":"Elm for the win! Elm is purely functional programming language. Some examples The first line is a so called type annotation, it describes the input and output type of functions. helloWorld: String helloWorld = \"Hello world!\" Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"About"},{"location":"about/#elm-for-the-win","text":"Elm is purely functional programming language.","title":"Elm for the win!"},{"location":"about/#some-examples","text":"The first line is a so called type annotation, it describes the input and output type of functions. helloWorld: String helloWorld = \"Hello world!\"","title":"Some examples"},{"location":"about/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"}]}